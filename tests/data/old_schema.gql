directive @willBeRemoved on FIELD

schema {
    query: Query
}
input AInput {
    """a"""
    a: String = "1"
    b: String!
}
"""The Query Root of this schema"""
type Query {
    """Just a simple string"""
    a(anArg: String): String!
    b: BType
}
type BType {
    a: String
}
type CType {
    a: String @deprecated(reason: "whynot")
    c: Int!
    d(arg: Int): String
}
union MyUnion = CType | BType
interface AnInterface {
    interfaceField: Int!
}
interface AnotherInterface {
    anotherInterfaceField: String
}
type WithInterfaces implements AnInterface & AnotherInterface {
    a: String!
}
type WithArguments {
    a(
        """Meh"""
        a: Int
        b: String
    ): String
    b(arg: Int = 1): String
}
enum Options {
    A
    B
    C
    E
    F @deprecated(reason: "Old")
}

"""Old"""
directive @yolo(
    """Included when true."""
    someArg: Boolean!

    anotherArg: String!

    willBeRemoved: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

type WillBeRemoved {
    a: String
}